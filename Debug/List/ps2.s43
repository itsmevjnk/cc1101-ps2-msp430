///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V6.40.1.950/W32 for MSP430          10/Sep/2022  21:37:39
// Copyright 1996-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430
//    Source file   =  Y:\Dev\cc1101-ps2\lib\src\ps2.c
//    Command line  =  
//        Y:\Dev\cc1101-ps2\lib\src\ps2.c -D HAL_HW_F149 -lC
//        Y:\Dev\cc1101-ps2\Debug\List -lA Y:\Dev\cc1101-ps2\Debug\List -o
//        Y:\Dev\cc1101-ps2\Debug\Obj --no_cse --no_unroll --no_inline
//        --no_code_motion --no_tbaa --debug -D__MSP430F149__ -e --double=32
//        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
//        7.3\430\lib\dlib\dl430fn.h" -I Y:\Dev\cc1101-ps2\hal\include\ -I
//        Y:\Dev\cc1101-ps2\hal\target\ -I Y:\Dev\cc1101-ps2\lib\include\ -I
//        Y:\Dev\cc1101-ps2\lib\cc1101\include\ -Ol --multiplier=16 --segment
//        __data16=DATA16 --segment __data20=DATA20
//    List file     =  Y:\Dev\cc1101-ps2\Debug\List\ps2.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME ps2

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?cstart_init_zero
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBWEAK _A_P4DIR
        PUBWEAK _A_P4OUT
        PUBWEAK _A_P4SEL
        PUBLIC ps2_buffer
        PUBLIC ps2_init
        PUBLIC ps2_transfer
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:16, SP:16, SR:16, R4:16, R5:16, R6:16, R7:16, R8:16
          CFI Resource R9:16, R10:16, R11:16, R12:16, R13:16, R14:16, R15:16
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+2
          CFI PC Frame(CFA, -2)
          CFI SR Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 Undefined
          CFI R13 Undefined
          CFI R14 Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN hal_timer_ticks
        EXTERN delay_us
        EXTERN hal_spi_transfer

// Y:\Dev\cc1101-ps2\lib\src\ps2.c
//    1 #include "ps2.h"
//    2 #include "hal_gpio.h"

        ASEGN DATA16_AN:DATA:NOROOT,01dH
// union <unnamed> volatile _A_P4OUT
_A_P4OUT:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,01eH
// union <unnamed> volatile _A_P4DIR
_A_P4DIR:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,01fH
// union <unnamed> volatile _A_P4SEL
_A_P4SEL:
        DS8 1
//    3 #include "hal_spi.h"
//    4 #include "hal_timer.h"
//    5 #include "delay.h"
//    6 

        RSEG DATA16_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero
//    7 static unsigned char ps2_last_read = 0; // timestamp of last time the controller was read
ps2_last_read:
        DS8 1
//    8 
//    9 #define PS2_ATT_LOW                 {while(hal_timer_ticks - ps2_last_read < PS2_DELAY_PACKET); hal_gpio_out_low(PS2_PORT_ATT, PS2_PIN_ATT); delay_us(PS2_DELAY_BYTE);} // activate ATT pin
//   10 #define PS2_ATT_HIGH                {hal_gpio_out_high(PS2_PORT_ATT, PS2_PIN_ATT);} // deactivate ATT pin
//   11 

        RSEG DATA16_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero
//   12 unsigned char ps2_buffer[32];
ps2_buffer:
        DS8 32
//   13 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   14 unsigned char ps2_transfer(unsigned char command) {
ps2_transfer:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ps2_transfer
        PUSH.W  R10
          CFI R10 Frame(CFA, -4)
          CFI CFA SP+4
        PUSH.W  R11
          CFI R11 Frame(CFA, -6)
          CFI CFA SP+6
        MOV.B   R12, R11
//   15   PS2_ATT_LOW;
??ps2_transfer_0:
        MOV.W   &hal_timer_ticks, R12
        MOV.W   &hal_timer_ticks + 2, R13
        MOV.B   &ps2_last_read, R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        SUB.W   R14, R12
        SUBC.W  R15, R13
        CMP.W   #0x0, R13
        JNC     ??ps2_transfer_0
        JNE     ??ps2_transfer_4
        CMP.W   #0x10, R12
        JNC     ??ps2_transfer_0
??ps2_transfer_4:
        BIC.B   #0x1, &0x1d
        MOV.W   #0xa, R12
          CFI FunCall delay_us
        CALL    #delay_us
//   16   
//   17   unsigned char ret = 0; // return value
        MOV.B   #0x0, R10
//   18   if(hal_spi_transfer(0x01) != 0xFF) goto finish; // first byte mismatch
        MOV.B   #0x1, R12
          CFI FunCall hal_spi_transfer
        CALL    #hal_spi_transfer
        CMP.B   #0xff, R12
        JNE     ??ps2_transfer_3
//   19   ret = hal_spi_transfer(command);
        MOV.B   R11, R12
          CFI FunCall hal_spi_transfer
        CALL    #hal_spi_transfer
        MOV.B   R12, R10
//   20   if(hal_spi_transfer(0x00) != 0x5A) { ret = 0; goto finish; } // third byte mismatch
        MOV.B   #0x0, R12
          CFI FunCall hal_spi_transfer
        CALL    #hal_spi_transfer
        CMP.B   #0x5a, R12
        JEQ     ??ps2_transfer_5
        MOV.B   #0x0, R10
        JMP     ??ps2_transfer_3
//   21   
//   22   for(unsigned char i = 0; i < (ps2_transfer_words(ret) << 1); i++) ps2_buffer[i] = hal_spi_transfer(ps2_buffer[i]); // this first reads ps2_buffer[i] to get the command byte, then saves the received data byte to ps2_buffer[i]
??ps2_transfer_5:
        MOV.B   #0x0, R11
        JMP     ??ps2_transfer_6
??ps2_transfer_1:
        MOV.B   R11, R11
        MOV.B   ps2_buffer(R11), R12
          CFI FunCall hal_spi_transfer
        CALL    #hal_spi_transfer
        MOV.B   R11, R11
        MOV.B   R12, ps2_buffer(R11)
        ADD.B   #0x1, R11
??ps2_transfer_6:
        MOV.B   R11, R11
        MOV.B   R10, R15
        AND.W   #0xf, R15
        RLA.W   R15
        CMP.W   R15, R11
        JL      ??ps2_transfer_1
//   23   
//   24 finish:
//   25   PS2_ATT_HIGH;
??ps2_transfer_3:
        BIS.B   #0x1, &0x1d
//   26   return ret;
        MOV.B   R10, R12
        POP.W   R11
          CFI R11 SameValue
          CFI CFA SP+4
        POP.W   R10
          CFI R10 SameValue
          CFI CFA SP+2
        RET
          CFI EndBlock cfiBlock0
        REQUIRE _A_P4OUT
//   27 }
//   28 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   29 void ps2_init(void) {
ps2_init:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ps2_init
          CFI NoCalls
//   30   /* configure the GPIO pin for ATT */
//   31   hal_gpio_func_io(PS2_PORT_ATT, PS2_PIN_ATT);
        BIC.B   #0x1, &0x1f
//   32   hal_gpio_dir_output(PS2_PORT_ATT, PS2_PIN_ATT);
        BIS.B   #0x1, &0x1e
//   33   hal_gpio_out_high(PS2_PORT_ATT, PS2_PIN_ATT);
        BIS.B   #0x1, &0x1d
//   34   
//   35   
//   36 }
        RET
          CFI EndBlock cfiBlock1
        REQUIRE _A_P4SEL
        REQUIRE _A_P4DIR
        REQUIRE _A_P4OUT

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 148 bytes in segment CODE
//   3 bytes in segment DATA16_AN
//  33 bytes in segment DATA16_Z
// 
// 148 bytes of CODE memory
//  33 bytes of DATA memory (+ 3 bytes shared)
//
//Errors: none
//Warnings: 5
