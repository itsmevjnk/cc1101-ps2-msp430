///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V6.40.1.950/W32 for MSP430          10/Sep/2022  21:37:38
// Copyright 1996-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430
//    Source file   =  Y:\Dev\cc1101-ps2\hal\src\hal_clk.c
//    Command line  =  
//        Y:\Dev\cc1101-ps2\hal\src\hal_clk.c -D HAL_HW_F149 -lC
//        Y:\Dev\cc1101-ps2\Debug\List -lA Y:\Dev\cc1101-ps2\Debug\List -o
//        Y:\Dev\cc1101-ps2\Debug\Obj --no_cse --no_unroll --no_inline
//        --no_code_motion --no_tbaa --debug -D__MSP430F149__ -e --double=32
//        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
//        7.3\430\lib\dlib\dl430fn.h" -I Y:\Dev\cc1101-ps2\hal\include\ -I
//        Y:\Dev\cc1101-ps2\hal\target\ -I Y:\Dev\cc1101-ps2\lib\include\ -I
//        Y:\Dev\cc1101-ps2\lib\cc1101\include\ -Ol --multiplier=16 --segment
//        __data16=DATA16 --segment __data20=DATA20
//    List file     =  Y:\Dev\cc1101-ps2\Debug\List\hal_clk.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME hal_clk

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBWEAK _A_BCSCTL1
        PUBWEAK _A_BCSCTL2
        PUBWEAK _A_IFG1
        PUBWEAK _A_WDTCTL
        PUBLIC hal_clk_init
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:16, SP:16, SR:16, R4:16, R5:16, R6:16, R7:16, R8:16
          CFI Resource R9:16, R10:16, R11:16, R12:16, R13:16, R14:16, R15:16
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+2
          CFI PC Frame(CFA, -2)
          CFI SR Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 Undefined
          CFI R13 Undefined
          CFI R14 Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
// Y:\Dev\cc1101-ps2\hal\src\hal_clk.c
//    1 #include "hal_clk.h"
//    2 #include "hal_hwdef.h"

        ASEGN DATA16_AN:DATA:NOROOT,02H
// union <unnamed> volatile _A_IFG1
_A_IFG1:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,0120H
// union <unnamed> volatile _A_WDTCTL
_A_WDTCTL:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,057H
// union <unnamed> volatile _A_BCSCTL1
_A_BCSCTL1:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,058H
// union <unnamed> volatile _A_BCSCTL2
_A_BCSCTL2:
        DS8 1
//    3 
//    4 #if defined HAL_CLK_BASIC
//    5 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//    6 void hal_clk_init(void) {
hal_clk_init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function hal_clk_init
          CFI NoCalls
//    7   WDTCTL = WDTPW + WDTHOLD; // Stop watchdog timer
        MOV.W   #0x5a80, &0x120
//    8   
//    9   BCSCTL1 = 0; // enable XT2
        MOV.B   #0x0, &0x57
//   10   
//   11   /* wait until crystal is ready to go (no OSCFault) */
//   12   do {
//   13     IFG1 &= ~OFIFG;
??hal_clk_init_1:
        BIC.B   #0x2, &0x2
//   14     for(unsigned char i = 0xFF; i > 0; i--);
        MOV.B   #0xff, R14
        JMP     ??hal_clk_init_2
??hal_clk_init_0:
        ADD.B   #0xff, R14
??hal_clk_init_2:
        CMP.B   #0x0, R14
        JNE     ??hal_clk_init_0
//   15   } while(IFG1 & OFIFG);
        BIT.B   #0x2, &0x2
        JC      ??hal_clk_init_1
//   16   
//   17   BCSCTL2 = 0x88; // MCLK = SMCLK = XT2CLK, SMCLK/1, DCO internal resistor
        MOV.B   #0x88, &0x58
//   18 }
        RET
          CFI EndBlock cfiBlock0
        REQUIRE _A_WDTCTL
        REQUIRE _A_BCSCTL1
        REQUIRE _A_IFG1
        REQUIRE _A_BCSCTL2

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//   19 
//   20 #else
//   21 #error "No system clock module type defined"
//   22 #endif
// 
// 38 bytes in segment CODE
//  5 bytes in segment DATA16_AN
// 
// 38 bytes of CODE memory
//  0 bytes of DATA memory (+ 5 bytes shared)
//
//Errors: none
//Warnings: none
