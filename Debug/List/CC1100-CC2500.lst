###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           10/Sep/2022  00:10:07
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  D:\cc1101-ps2-itsmevjnk\lib\cc1101\src\CC1100-CC2500.c
#    Command line  =  
#        D:\cc1101-ps2-itsmevjnk\lib\cc1101\src\CC1100-CC2500.c -D HAL_HW_F149
#        -lC D:\cc1101-ps2-itsmevjnk\Debug\List -lA
#        D:\cc1101-ps2-itsmevjnk\Debug\List -o
#        D:\cc1101-ps2-itsmevjnk\Debug\Obj --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430F149__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\430\lib\dlib\dl430fn.h" -I D:\cc1101-ps2-itsmevjnk\hal\include\ -I
#        D:\cc1101-ps2-itsmevjnk\hal\target\ -I
#        D:\cc1101-ps2-itsmevjnk\lib\include\ -I
#        D:\cc1101-ps2-itsmevjnk\lib\cc1101\include\ -Ol --multiplier=16
#        --segment __data16=DATA16 --segment __data20=DATA20
#    List file     =  D:\cc1101-ps2-itsmevjnk\Debug\List\CC1100-CC2500.lst
#    Object file   =  D:\cc1101-ps2-itsmevjnk\Debug\Obj\CC1100-CC2500.r43
#
###############################################################################

D:\cc1101-ps2-itsmevjnk\lib\cc1101\src\CC1100-CC2500.c
      1          /* --COPYRIGHT--,BSD
      2           * Copyright (c) 2011, Texas Instruments Incorporated
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * *  Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer.
     11           *
     12           * *  Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in the
     14           *    documentation and/or other materials provided with the distribution.
     15           *
     16           * *  Neither the name of Texas Instruments Incorporated nor the names of
     17           *    its contributors may be used to endorse or promote products derived
     18           *    from this software without specific prior written permission.
     19           *
     20           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21           * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
     22           * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     23           * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     24           * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     25           * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     26           * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
     27           * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     28           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     29           * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     30           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31           * --/COPYRIGHT--*/
     32          //------------------------------------------------------------------------------
     33          //  Description:  This file contains functions that configure the CC1100/2500
     34          //  device.
     35          //
     36          //  Demo Application for MSP430/CC1100-2500 Interface Code Library v1.0
     37          //
     38          //  K. Quiring
     39          //  Texas Instruments, Inc.
     40          //  July 2006
     41          //  IAR Embedded Workbench v3.41
     42          //------------------------------------------------------------------------------
     43          
     44          
     45          #include "cc1101.h"

  /* --COPYRIGHT--,BSD
                     ^
"D:\cc1101-ps2-itsmevjnk\lib\cc1101\include\TI_CC_CC1100-CC2500.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)

   \                                 In  segment DATA16_AN, at 0x28
   \   union <unnamed> volatile _A_P2IN
   \                     _A_P2IN:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x2b
   \   union <unnamed> volatile _A_P2IFG
   \                     _A_P2IFG:
   \   000000                DS8 1
     46          #include "TI_CC_CC1100-CC2500.h"
     47          
     48          //#define TI_CC_RF_FREQ  868                 // 315, 433, 868, 915, 2400
     49          
     50          
     51          
     52          //------------------------------------------------------------------------------
     53          //  void writeRFSettings(void)
     54          //
     55          //  DESCRIPTION:
     56          //  Used to configure the CCxxxx registers.  There are five instances of this
     57          //  function, one for each available carrier frequency.  The instance compiled
     58          //  is chosen according to the system variable TI_CC_RF_FREQ, assigned within
     59          //  the header file "TI_CC_hardware_board.h".
     60          //
     61          //  ARGUMENTS:
     62          //      none
     63          //------------------------------------------------------------------------------
     64          
     65          
     66          //#if TI_CC_RF_FREQ == 315                          // 315 MHz
     67          // Product = CC1100
     68          // Crystal accuracy = 40 ppm
     69          // X-tal frequency = 26 MHz
     70          // RF output power = 0 dBm
     71          // RX filterbandwidth = 540.000000 kHz
     72          // Deviation = 0.000000
     73          // Return state:  Return to RX state upon leaving either TX or RX
     74          // Datarate = 250.000000 kbps
     75          // Modulation = (7) MSK
     76          // Manchester enable = (0) Manchester disabled
     77          // RF Frequency = 315.000000 MHz
     78          // Channel spacing = 199.951172 kHz
     79          // Channel number = 0
     80          // Optimization = Sensitivity
     81          // Sync mode = (3) 30/32 sync word bits detected
     82          // Format of RX/TX data = (0) Normal mode, use FIFOs for RX and TX
     83          // CRC operation = (1) CRC calculation in TX and CRC check in RX enabled
     84          // Forward Error Correction = (0) FEC disabled
     85          // Length configuration = (1) Variable length packets, packet length configured by the first received byte after sync word.
     86          // Packetlength = 255
     87          // Preamble count = (2)  4 bytes
     88          // Append status = 1
     89          // Address check = (1)  address check
     90          // FIFO autoflush = 0
     91          // Device address = 1
     92          // GDO0 signal selection = ( 6) Asserts when sync word has been sent / received, and de-asserts at the end of the packet
     93          // GDO2 signal selection = (11) Serial Clock

   \                                 In  segment CODE, align 2
     94          void writeRFSettings_315(unsigned char channel)
   \                     writeRFSettings_315:
     95          {
   \   000000   0A12         PUSH.W  R10
   \   000002   4A4C         MOV.B   R12, R10
     96              // Write register settings
     97              TI_CC_SPIWriteReg(TI_CCxxx0_IOCFG2,   0x0B); // GDO2 output pin config.
   \   000004   7D400B00     MOV.B   #0xb, R13
   \   000008   4C43         MOV.B   #0x0, R12
   \   00000A   B012....     CALL    #TI_CC_SPIWriteReg
     98              TI_CC_SPIWriteReg(TI_CCxxx0_IOCFG0,   0x06); // GDO0 output pin config.
   \   00000E   7D400600     MOV.B   #0x6, R13
   \   000012   6C43         MOV.B   #0x2, R12
   \   000014   B012....     CALL    #TI_CC_SPIWriteReg
     99              TI_CC_SPIWriteReg(TI_CCxxx0_PKTLEN,   0xFF); // Packet length.
   \   000018   7D43         MOV.B   #0xff, R13
   \   00001A   7C400600     MOV.B   #0x6, R12
   \   00001E   B012....     CALL    #TI_CC_SPIWriteReg
    100              TI_CC_SPIWriteReg(TI_CCxxx0_PKTCTRL1, 0x05); // Packet automation control.
   \   000022   7D400500     MOV.B   #0x5, R13
   \   000026   7C400700     MOV.B   #0x7, R12
   \   00002A   B012....     CALL    #TI_CC_SPIWriteReg
    101              TI_CC_SPIWriteReg(TI_CCxxx0_PKTCTRL0, 0x05); // Packet automation control.
   \   00002E   7D400500     MOV.B   #0x5, R13
   \   000032   7C42         MOV.B   #0x8, R12
   \   000034   B012....     CALL    #TI_CC_SPIWriteReg
    102              TI_CC_SPIWriteReg(TI_CCxxx0_ADDR,     0x01); // Device address.
   \   000038   5D43         MOV.B   #0x1, R13
   \   00003A   7C400900     MOV.B   #0x9, R12
   \   00003E   B012....     CALL    #TI_CC_SPIWriteReg
    103              TI_CC_SPIWriteReg(TI_CCxxx0_CHANNR,   channel); // Channel number.
   \   000042   4D4A         MOV.B   R10, R13
   \   000044   7C400A00     MOV.B   #0xa, R12
   \   000048   B012....     CALL    #TI_CC_SPIWriteReg
    104              TI_CC_SPIWriteReg(TI_CCxxx0_FSCTRL1,  0x0B); // Freq synthesizer control.
   \   00004C   7D400B00     MOV.B   #0xb, R13
   \   000050   7C400B00     MOV.B   #0xb, R12
   \   000054   B012....     CALL    #TI_CC_SPIWriteReg
    105              TI_CC_SPIWriteReg(TI_CCxxx0_FSCTRL0,  0x00); // Freq synthesizer control.
   \   000058   4D43         MOV.B   #0x0, R13
   \   00005A   7C400C00     MOV.B   #0xc, R12
   \   00005E   B012....     CALL    #TI_CC_SPIWriteReg
    106              TI_CC_SPIWriteReg(TI_CCxxx0_FREQ2,    0x0C); // Freq control word, high byte
   \   000062   7D400C00     MOV.B   #0xc, R13
   \   000066   7C400D00     MOV.B   #0xd, R12
   \   00006A   B012....     CALL    #TI_CC_SPIWriteReg
    107              TI_CC_SPIWriteReg(TI_CCxxx0_FREQ1,    0x1D); // Freq control word, mid byte.
   \   00006E   7D401D00     MOV.B   #0x1d, R13
   \   000072   7C400E00     MOV.B   #0xe, R12
   \   000076   B012....     CALL    #TI_CC_SPIWriteReg
    108              TI_CC_SPIWriteReg(TI_CCxxx0_FREQ0,    0x89); // Freq control word, low byte.
   \   00007A   7D408900     MOV.B   #0x89, R13
   \   00007E   7C400F00     MOV.B   #0xf, R12
   \   000082   B012....     CALL    #TI_CC_SPIWriteReg
    109              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG4,  0x2D); // Modem configuration.
   \   000086   7D402D00     MOV.B   #0x2d, R13
   \   00008A   7C401000     MOV.B   #0x10, R12
   \   00008E   B012....     CALL    #TI_CC_SPIWriteReg
    110              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG3,  0x3B); // Modem configuration.
   \   000092   7D403B00     MOV.B   #0x3b, R13
   \   000096   7C401100     MOV.B   #0x11, R12
   \   00009A   B012....     CALL    #TI_CC_SPIWriteReg
    111              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG2,  0x73); // Modem configuration.
   \   00009E   7D407300     MOV.B   #0x73, R13
   \   0000A2   7C401200     MOV.B   #0x12, R12
   \   0000A6   B012....     CALL    #TI_CC_SPIWriteReg
    112              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG1,  0x22); // Modem configuration.
   \   0000AA   7D402200     MOV.B   #0x22, R13
   \   0000AE   7C401300     MOV.B   #0x13, R12
   \   0000B2   B012....     CALL    #TI_CC_SPIWriteReg
    113              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG0,  0xF8); // Modem configuration.
   \   0000B6   7D40F800     MOV.B   #0xf8, R13
   \   0000BA   7C401400     MOV.B   #0x14, R12
   \   0000BE   B012....     CALL    #TI_CC_SPIWriteReg
    114              TI_CC_SPIWriteReg(TI_CCxxx0_DEVIATN,  0x00); // Modem dev (when FSK mod en)
   \   0000C2   4D43         MOV.B   #0x0, R13
   \   0000C4   7C401500     MOV.B   #0x15, R12
   \   0000C8   B012....     CALL    #TI_CC_SPIWriteReg
    115              TI_CC_SPIWriteReg(TI_CCxxx0_MCSM1 ,   0x3F); //MainRadio Cntrl State Machine
   \   0000CC   7D403F00     MOV.B   #0x3f, R13
   \   0000D0   7C401700     MOV.B   #0x17, R12
   \   0000D4   B012....     CALL    #TI_CC_SPIWriteReg
    116              TI_CC_SPIWriteReg(TI_CCxxx0_MCSM0 ,   0x18); //MainRadio Cntrl State Machine
   \   0000D8   7D401800     MOV.B   #0x18, R13
   \   0000DC   7C401800     MOV.B   #0x18, R12
   \   0000E0   B012....     CALL    #TI_CC_SPIWriteReg
    117              TI_CC_SPIWriteReg(TI_CCxxx0_FOCCFG,   0x1D); // Freq Offset Compense. Config
   \   0000E4   7D401D00     MOV.B   #0x1d, R13
   \   0000E8   7C401900     MOV.B   #0x19, R12
   \   0000EC   B012....     CALL    #TI_CC_SPIWriteReg
    118              TI_CC_SPIWriteReg(TI_CCxxx0_BSCFG,    0x1C); //  Bit synchronization config.
   \   0000F0   7D401C00     MOV.B   #0x1c, R13
   \   0000F4   7C401A00     MOV.B   #0x1a, R12
   \   0000F8   B012....     CALL    #TI_CC_SPIWriteReg
    119              TI_CC_SPIWriteReg(TI_CCxxx0_AGCCTRL2, 0xC7); // AGC control.
   \   0000FC   7D40C700     MOV.B   #0xc7, R13
   \   000100   7C401B00     MOV.B   #0x1b, R12
   \   000104   B012....     CALL    #TI_CC_SPIWriteReg
    120              TI_CC_SPIWriteReg(TI_CCxxx0_AGCCTRL1, 0x00); // AGC control.
   \   000108   4D43         MOV.B   #0x0, R13
   \   00010A   7C401C00     MOV.B   #0x1c, R12
   \   00010E   B012....     CALL    #TI_CC_SPIWriteReg
    121              TI_CC_SPIWriteReg(TI_CCxxx0_AGCCTRL0, 0xB2); // AGC control.
   \   000112   7D40B200     MOV.B   #0xb2, R13
   \   000116   7C401D00     MOV.B   #0x1d, R12
   \   00011A   B012....     CALL    #TI_CC_SPIWriteReg
    122              TI_CC_SPIWriteReg(TI_CCxxx0_FREND1,   0xB6); // Front end RX configuration.
   \   00011E   7D40B600     MOV.B   #0xb6, R13
   \   000122   7C402100     MOV.B   #0x21, R12
   \   000126   B012....     CALL    #TI_CC_SPIWriteReg
    123              TI_CC_SPIWriteReg(TI_CCxxx0_FREND0,   0x10); // Front end RX configuration.
   \   00012A   7D401000     MOV.B   #0x10, R13
   \   00012E   7C402200     MOV.B   #0x22, R12
   \   000132   B012....     CALL    #TI_CC_SPIWriteReg
    124              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL3,   0xEA); // Frequency synthesizer cal.
   \   000136   7D40EA00     MOV.B   #0xea, R13
   \   00013A   7C402300     MOV.B   #0x23, R12
   \   00013E   B012....     CALL    #TI_CC_SPIWriteReg
    125              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL2,   0x0A); // Frequency synthesizer cal.
   \   000142   7D400A00     MOV.B   #0xa, R13
   \   000146   7C402400     MOV.B   #0x24, R12
   \   00014A   B012....     CALL    #TI_CC_SPIWriteReg
    126              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL1,   0x00); // Frequency synthesizer cal.
   \   00014E   4D43         MOV.B   #0x0, R13
   \   000150   7C402500     MOV.B   #0x25, R12
   \   000154   B012....     CALL    #TI_CC_SPIWriteReg
    127              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL0,   0x11); // Frequency synthesizer cal.
   \   000158   7D401100     MOV.B   #0x11, R13
   \   00015C   7C402600     MOV.B   #0x26, R12
   \   000160   B012....     CALL    #TI_CC_SPIWriteReg
    128              TI_CC_SPIWriteReg(TI_CCxxx0_FSTEST,   0x59); // Frequency synthesizer cal.
   \   000164   7D405900     MOV.B   #0x59, R13
   \   000168   7C402900     MOV.B   #0x29, R12
   \   00016C   B012....     CALL    #TI_CC_SPIWriteReg
    129              TI_CC_SPIWriteReg(TI_CCxxx0_TEST2,    0x88); // Various test settings.
   \   000170   7D408800     MOV.B   #0x88, R13
   \   000174   7C402C00     MOV.B   #0x2c, R12
   \   000178   B012....     CALL    #TI_CC_SPIWriteReg
    130              TI_CC_SPIWriteReg(TI_CCxxx0_TEST1,    0x31); // Various test settings.
   \   00017C   7D403100     MOV.B   #0x31, R13
   \   000180   7C402D00     MOV.B   #0x2d, R12
   \   000184   B012....     CALL    #TI_CC_SPIWriteReg
    131              TI_CC_SPIWriteReg(TI_CCxxx0_TEST0,    0x0B); // Various test settings.
   \   000188   7D400B00     MOV.B   #0xb, R13
   \   00018C   7C402E00     MOV.B   #0x2e, R12
   \   000190   B012....     CALL    #TI_CC_SPIWriteReg
    132              
    133              TI_CC_SPIWriteReg(TI_CCxxx0_PATABLE,  0x51); //PATABLE
   \   000194   7D405100     MOV.B   #0x51, R13
   \   000198   7C403E00     MOV.B   #0x3e, R12
   \   00019C   B012....     CALL    #TI_CC_SPIWriteReg
    134          }
   \   0001A0   3A41         POP.W   R10
   \   0001A2   3041         RET
    135          
    136          // PATABLE (0 dBm output power)
    137          //extern char paTable315[] = {0x51};
    138          //extern char paTableLen = 1;
    139          
    140          
    141          
    142          
    143          //#if TI_CC_RF_FREQ == 433                          // 433 MHz
    144          // Product = CC1100
    145          // Crystal accuracy = 40 ppm
    146          // X-tal frequency = 26 MHz
    147          // RF output power = 0 dBm
    148          // RX filterbandwidth = 540.000000 kHz
    149          // Deviation = 0.000000
    150          // Return state:  Return to RX state upon leaving either TX or RX
    151          // Datarate = 250.000000 kbps
    152          // Modulation = (7) MSK
    153          // Manchester enable = (0) Manchester disabled
    154          // RF Frequency = 433.000000 MHz
    155          // Channel spacing = 199.951172 kHz
    156          // Channel number = 0
    157          // Optimization = Sensitivity
    158          // Sync mode = (3) 30/32 sync word bits detected
    159          // Format of RX/TX data = (0) Normal mode, use FIFOs for RX and TX
    160          // CRC operation = (1) CRC calculation in TX and CRC check in RX enabled
    161          // Forward Error Correction = (0) FEC disabled
    162          // Length configuration = (1) Variable length packets, packet length configured by the first received byte after sync word.
    163          // Packetlength = 255
    164          // Preamble count = (2)  4 bytes
    165          // Append status = 1
    166          // Address check = (0) No address check
    167          // FIFO autoflush = 0
    168          // Device address = 0
    169          // GDO0 signal selection = ( 6) Asserts when sync word has been sent / received, and de-asserts at the end of the packet
    170          // GDO2 signal selection = (11) Serial Clock

   \                                 In  segment CODE, align 2
    171          void writeRFSettings_433(unsigned char channel)
   \                     writeRFSettings_433:
    172          {
   \   000000   0A12         PUSH.W  R10
   \   000002   4A4C         MOV.B   R12, R10
    173              // Write register settings
    174              TI_CC_SPIWriteReg(TI_CCxxx0_IOCFG2,   0x0B); // GDO2 output pin config.
   \   000004   7D400B00     MOV.B   #0xb, R13
   \   000008   4C43         MOV.B   #0x0, R12
   \   00000A   B012....     CALL    #TI_CC_SPIWriteReg
    175              TI_CC_SPIWriteReg(TI_CCxxx0_IOCFG0,   0x06); // GDO0 output pin config.
   \   00000E   7D400600     MOV.B   #0x6, R13
   \   000012   6C43         MOV.B   #0x2, R12
   \   000014   B012....     CALL    #TI_CC_SPIWriteReg
    176              TI_CC_SPIWriteReg(TI_CCxxx0_PKTLEN,   0xFF); // Packet length.
   \   000018   7D43         MOV.B   #0xff, R13
   \   00001A   7C400600     MOV.B   #0x6, R12
   \   00001E   B012....     CALL    #TI_CC_SPIWriteReg
    177              TI_CC_SPIWriteReg(TI_CCxxx0_PKTCTRL1, 0x05); // Packet automation control.
   \   000022   7D400500     MOV.B   #0x5, R13
   \   000026   7C400700     MOV.B   #0x7, R12
   \   00002A   B012....     CALL    #TI_CC_SPIWriteReg
    178              TI_CC_SPIWriteReg(TI_CCxxx0_PKTCTRL0, 0x05); // Packet automation control.
   \   00002E   7D400500     MOV.B   #0x5, R13
   \   000032   7C42         MOV.B   #0x8, R12
   \   000034   B012....     CALL    #TI_CC_SPIWriteReg
    179              TI_CC_SPIWriteReg(TI_CCxxx0_ADDR,     0x01); // Device address.
   \   000038   5D43         MOV.B   #0x1, R13
   \   00003A   7C400900     MOV.B   #0x9, R12
   \   00003E   B012....     CALL    #TI_CC_SPIWriteReg
    180              TI_CC_SPIWriteReg(TI_CCxxx0_CHANNR,   channel); // Channel number.
   \   000042   4D4A         MOV.B   R10, R13
   \   000044   7C400A00     MOV.B   #0xa, R12
   \   000048   B012....     CALL    #TI_CC_SPIWriteReg
    181              TI_CC_SPIWriteReg(TI_CCxxx0_FSCTRL1,  0x0B); // Freq synthesizer control.
   \   00004C   7D400B00     MOV.B   #0xb, R13
   \   000050   7C400B00     MOV.B   #0xb, R12
   \   000054   B012....     CALL    #TI_CC_SPIWriteReg
    182              TI_CC_SPIWriteReg(TI_CCxxx0_FSCTRL0,  0x00); // Freq synthesizer control.
   \   000058   4D43         MOV.B   #0x0, R13
   \   00005A   7C400C00     MOV.B   #0xc, R12
   \   00005E   B012....     CALL    #TI_CC_SPIWriteReg
    183              TI_CC_SPIWriteReg(TI_CCxxx0_FREQ2,    0x10); // Freq control word, high byte
   \   000062   7D401000     MOV.B   #0x10, R13
   \   000066   7C400D00     MOV.B   #0xd, R12
   \   00006A   B012....     CALL    #TI_CC_SPIWriteReg
    184              TI_CC_SPIWriteReg(TI_CCxxx0_FREQ1,    0xA7); // Freq control word, mid byte.
   \   00006E   7D40A700     MOV.B   #0xa7, R13
   \   000072   7C400E00     MOV.B   #0xe, R12
   \   000076   B012....     CALL    #TI_CC_SPIWriteReg
    185              TI_CC_SPIWriteReg(TI_CCxxx0_FREQ0,    0x62); // Freq control word, low byte.
   \   00007A   7D406200     MOV.B   #0x62, R13
   \   00007E   7C400F00     MOV.B   #0xf, R12
   \   000082   B012....     CALL    #TI_CC_SPIWriteReg
    186              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG4,  0x2D); // Modem configuration.
   \   000086   7D402D00     MOV.B   #0x2d, R13
   \   00008A   7C401000     MOV.B   #0x10, R12
   \   00008E   B012....     CALL    #TI_CC_SPIWriteReg
    187              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG3,  0x3B); // Modem configuration.
   \   000092   7D403B00     MOV.B   #0x3b, R13
   \   000096   7C401100     MOV.B   #0x11, R12
   \   00009A   B012....     CALL    #TI_CC_SPIWriteReg
    188              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG2,  0x73); // Modem configuration.
   \   00009E   7D407300     MOV.B   #0x73, R13
   \   0000A2   7C401200     MOV.B   #0x12, R12
   \   0000A6   B012....     CALL    #TI_CC_SPIWriteReg
    189              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG1,  0x22); // Modem configuration.
   \   0000AA   7D402200     MOV.B   #0x22, R13
   \   0000AE   7C401300     MOV.B   #0x13, R12
   \   0000B2   B012....     CALL    #TI_CC_SPIWriteReg
    190              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG0,  0xF8); // Modem configuration.
   \   0000B6   7D40F800     MOV.B   #0xf8, R13
   \   0000BA   7C401400     MOV.B   #0x14, R12
   \   0000BE   B012....     CALL    #TI_CC_SPIWriteReg
    191              TI_CC_SPIWriteReg(TI_CCxxx0_DEVIATN,  0x00); // Modem dev (when FSK mod en)
   \   0000C2   4D43         MOV.B   #0x0, R13
   \   0000C4   7C401500     MOV.B   #0x15, R12
   \   0000C8   B012....     CALL    #TI_CC_SPIWriteReg
    192              TI_CC_SPIWriteReg(TI_CCxxx0_MCSM1 ,   0x3F); //MainRadio Cntrl State Machine
   \   0000CC   7D403F00     MOV.B   #0x3f, R13
   \   0000D0   7C401700     MOV.B   #0x17, R12
   \   0000D4   B012....     CALL    #TI_CC_SPIWriteReg
    193              TI_CC_SPIWriteReg(TI_CCxxx0_MCSM0 ,   0x18); //MainRadio Cntrl State Machine
   \   0000D8   7D401800     MOV.B   #0x18, R13
   \   0000DC   7C401800     MOV.B   #0x18, R12
   \   0000E0   B012....     CALL    #TI_CC_SPIWriteReg
    194              TI_CC_SPIWriteReg(TI_CCxxx0_FOCCFG,   0x1D); // Freq Offset Compens. Config
   \   0000E4   7D401D00     MOV.B   #0x1d, R13
   \   0000E8   7C401900     MOV.B   #0x19, R12
   \   0000EC   B012....     CALL    #TI_CC_SPIWriteReg
    195              TI_CC_SPIWriteReg(TI_CCxxx0_BSCFG,    0x1C); //  Bit synchronization config.
   \   0000F0   7D401C00     MOV.B   #0x1c, R13
   \   0000F4   7C401A00     MOV.B   #0x1a, R12
   \   0000F8   B012....     CALL    #TI_CC_SPIWriteReg
    196              TI_CC_SPIWriteReg(TI_CCxxx0_AGCCTRL2, 0xC7); // AGC control.
   \   0000FC   7D40C700     MOV.B   #0xc7, R13
   \   000100   7C401B00     MOV.B   #0x1b, R12
   \   000104   B012....     CALL    #TI_CC_SPIWriteReg
    197              TI_CC_SPIWriteReg(TI_CCxxx0_AGCCTRL1, 0x00); // AGC control.
   \   000108   4D43         MOV.B   #0x0, R13
   \   00010A   7C401C00     MOV.B   #0x1c, R12
   \   00010E   B012....     CALL    #TI_CC_SPIWriteReg
    198              TI_CC_SPIWriteReg(TI_CCxxx0_AGCCTRL0, 0xB2); // AGC control.
   \   000112   7D40B200     MOV.B   #0xb2, R13
   \   000116   7C401D00     MOV.B   #0x1d, R12
   \   00011A   B012....     CALL    #TI_CC_SPIWriteReg
    199              TI_CC_SPIWriteReg(TI_CCxxx0_FREND1,   0xB6); // Front end RX configuration.
   \   00011E   7D40B600     MOV.B   #0xb6, R13
   \   000122   7C402100     MOV.B   #0x21, R12
   \   000126   B012....     CALL    #TI_CC_SPIWriteReg
    200              TI_CC_SPIWriteReg(TI_CCxxx0_FREND0,   0x10); // Front end RX configuration.
   \   00012A   7D401000     MOV.B   #0x10, R13
   \   00012E   7C402200     MOV.B   #0x22, R12
   \   000132   B012....     CALL    #TI_CC_SPIWriteReg
    201              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL3,   0xEA); // Frequency synthesizer cal.
   \   000136   7D40EA00     MOV.B   #0xea, R13
   \   00013A   7C402300     MOV.B   #0x23, R12
   \   00013E   B012....     CALL    #TI_CC_SPIWriteReg
    202              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL2,   0x0A); // Frequency synthesizer cal.
   \   000142   7D400A00     MOV.B   #0xa, R13
   \   000146   7C402400     MOV.B   #0x24, R12
   \   00014A   B012....     CALL    #TI_CC_SPIWriteReg
    203              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL1,   0x00); // Frequency synthesizer cal.
   \   00014E   4D43         MOV.B   #0x0, R13
   \   000150   7C402500     MOV.B   #0x25, R12
   \   000154   B012....     CALL    #TI_CC_SPIWriteReg
    204              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL0,   0x11); // Frequency synthesizer cal.
   \   000158   7D401100     MOV.B   #0x11, R13
   \   00015C   7C402600     MOV.B   #0x26, R12
   \   000160   B012....     CALL    #TI_CC_SPIWriteReg
    205              TI_CC_SPIWriteReg(TI_CCxxx0_FSTEST,   0x59); // Frequency synthesizer cal.
   \   000164   7D405900     MOV.B   #0x59, R13
   \   000168   7C402900     MOV.B   #0x29, R12
   \   00016C   B012....     CALL    #TI_CC_SPIWriteReg
    206              TI_CC_SPIWriteReg(TI_CCxxx0_TEST2,    0x88); // Various test settings.
   \   000170   7D408800     MOV.B   #0x88, R13
   \   000174   7C402C00     MOV.B   #0x2c, R12
   \   000178   B012....     CALL    #TI_CC_SPIWriteReg
    207              TI_CC_SPIWriteReg(TI_CCxxx0_TEST1,    0x31); // Various test settings.
   \   00017C   7D403100     MOV.B   #0x31, R13
   \   000180   7C402D00     MOV.B   #0x2d, R12
   \   000184   B012....     CALL    #TI_CC_SPIWriteReg
    208              TI_CC_SPIWriteReg(TI_CCxxx0_TEST0,    0x0B); // Various test settings.
   \   000188   7D400B00     MOV.B   #0xb, R13
   \   00018C   7C402E00     MOV.B   #0x2e, R12
   \   000190   B012....     CALL    #TI_CC_SPIWriteReg
    209              
    210              TI_CC_SPIWriteReg(TI_CCxxx0_PATABLE,  0x51); //PATABLE
   \   000194   7D405100     MOV.B   #0x51, R13
   \   000198   7C403E00     MOV.B   #0x3e, R12
   \   00019C   B012....     CALL    #TI_CC_SPIWriteReg
    211          }
   \   0001A0   3A41         POP.W   R10
   \   0001A2   3041         RET
    212          
    213          // PATABLE (0 dBm output power)
    214          //extern char paTable_433[] = {0x51};
    215          //extern char paTableLen = 1;
    216          
    217          
    218          
    219          //#if TI_CC_RF_FREQ == 868                          // 868 MHz
    220          // Product = CC1100
    221          // Crystal accuracy = 40 ppm
    222          // X-tal frequency = 26 MHz
    223          // RF output power = 0 dBm
    224          // RX filterbandwidth = 540.000000 kHz
    225          // Deviation = 0.000000
    226          // Return state:  Return to RX state upon leaving either TX or RX
    227          // Datarate = 250.000000 kbps
    228          // Modulation = (7) MSK
    229          // Manchester enable = (0) Manchester disabled
    230          // RF Frequency = 868.000000 MHz
    231          // Channel spacing = 199.951172 kHz
    232          // Channel number = 0
    233          // Optimization = Sensitivity
    234          // Sync mode = (3) 30/32 sync word bits detected
    235          // Format of RX/TX data = (0) Normal mode, use FIFOs for RX and TX
    236          // CRC operation = (1) CRC calculation in TX and CRC check in RX enabled
    237          // Forward Error Correction = (0) FEC disabled
    238          // Length configuration = (1) Variable length packets, packet length configured by the first received byte after sync word.
    239          // Packetlength = 255
    240          // Preamble count = (2)  4 bytes
    241          // Append status = 1
    242          // Address check = (0) No address check
    243          // FIFO autoflush = 0
    244          // Device address = 0
    245          // GDO0 signal selection = ( 6) Asserts when sync word has been sent / received, and de-asserts at the end of the packet
    246          // GDO2 signal selection = (11) Serial Clock

   \                                 In  segment CODE, align 2
    247          void writeRFSettings_868(unsigned char channel)
   \                     writeRFSettings_868:
    248          {
   \   000000   0A12         PUSH.W  R10
   \   000002   4A4C         MOV.B   R12, R10
    249              // Write register settings
    250              TI_CC_SPIWriteReg(TI_CCxxx0_IOCFG2,   0x0B); // GDO2 output pin config.
   \   000004   7D400B00     MOV.B   #0xb, R13
   \   000008   4C43         MOV.B   #0x0, R12
   \   00000A   B012....     CALL    #TI_CC_SPIWriteReg
    251              TI_CC_SPIWriteReg(TI_CCxxx0_IOCFG0,   0x06); // GDO0 output pin config.
   \   00000E   7D400600     MOV.B   #0x6, R13
   \   000012   6C43         MOV.B   #0x2, R12
   \   000014   B012....     CALL    #TI_CC_SPIWriteReg
    252              TI_CC_SPIWriteReg(TI_CCxxx0_PKTLEN,   0xFF); // Packet length.
   \   000018   7D43         MOV.B   #0xff, R13
   \   00001A   7C400600     MOV.B   #0x6, R12
   \   00001E   B012....     CALL    #TI_CC_SPIWriteReg
    253              TI_CC_SPIWriteReg(TI_CCxxx0_PKTCTRL1, 0x05); // Packet automation control.
   \   000022   7D400500     MOV.B   #0x5, R13
   \   000026   7C400700     MOV.B   #0x7, R12
   \   00002A   B012....     CALL    #TI_CC_SPIWriteReg
    254              TI_CC_SPIWriteReg(TI_CCxxx0_PKTCTRL0, 0x05); // Packet automation control.
   \   00002E   7D400500     MOV.B   #0x5, R13
   \   000032   7C42         MOV.B   #0x8, R12
   \   000034   B012....     CALL    #TI_CC_SPIWriteReg
    255              TI_CC_SPIWriteReg(TI_CCxxx0_ADDR,     0x01); // Device address.
   \   000038   5D43         MOV.B   #0x1, R13
   \   00003A   7C400900     MOV.B   #0x9, R12
   \   00003E   B012....     CALL    #TI_CC_SPIWriteReg
    256              TI_CC_SPIWriteReg(TI_CCxxx0_CHANNR,   channel); // Channel number.
   \   000042   4D4A         MOV.B   R10, R13
   \   000044   7C400A00     MOV.B   #0xa, R12
   \   000048   B012....     CALL    #TI_CC_SPIWriteReg
    257              TI_CC_SPIWriteReg(TI_CCxxx0_FSCTRL1,  0x0B); // Freq synthesizer control.
   \   00004C   7D400B00     MOV.B   #0xb, R13
   \   000050   7C400B00     MOV.B   #0xb, R12
   \   000054   B012....     CALL    #TI_CC_SPIWriteReg
    258              TI_CC_SPIWriteReg(TI_CCxxx0_FSCTRL0,  0x00); // Freq synthesizer control.
   \   000058   4D43         MOV.B   #0x0, R13
   \   00005A   7C400C00     MOV.B   #0xc, R12
   \   00005E   B012....     CALL    #TI_CC_SPIWriteReg
    259              TI_CC_SPIWriteReg(TI_CCxxx0_FREQ2,    0x21); // Freq control word, high byte
   \   000062   7D402100     MOV.B   #0x21, R13
   \   000066   7C400D00     MOV.B   #0xd, R12
   \   00006A   B012....     CALL    #TI_CC_SPIWriteReg
    260              TI_CC_SPIWriteReg(TI_CCxxx0_FREQ1,    0x62); // Freq control word, mid byte.
   \   00006E   7D406200     MOV.B   #0x62, R13
   \   000072   7C400E00     MOV.B   #0xe, R12
   \   000076   B012....     CALL    #TI_CC_SPIWriteReg
    261              TI_CC_SPIWriteReg(TI_CCxxx0_FREQ0,    0x76); // Freq control word, low byte.
   \   00007A   7D407600     MOV.B   #0x76, R13
   \   00007E   7C400F00     MOV.B   #0xf, R12
   \   000082   B012....     CALL    #TI_CC_SPIWriteReg
    262              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG4,  0x2D); // Modem configuration.
   \   000086   7D402D00     MOV.B   #0x2d, R13
   \   00008A   7C401000     MOV.B   #0x10, R12
   \   00008E   B012....     CALL    #TI_CC_SPIWriteReg
    263              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG3,  0x3B); // Modem configuration.
   \   000092   7D403B00     MOV.B   #0x3b, R13
   \   000096   7C401100     MOV.B   #0x11, R12
   \   00009A   B012....     CALL    #TI_CC_SPIWriteReg
    264              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG2,  0x73); // Modem configuration.
   \   00009E   7D407300     MOV.B   #0x73, R13
   \   0000A2   7C401200     MOV.B   #0x12, R12
   \   0000A6   B012....     CALL    #TI_CC_SPIWriteReg
    265              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG1,  0x22); // Modem configuration.
   \   0000AA   7D402200     MOV.B   #0x22, R13
   \   0000AE   7C401300     MOV.B   #0x13, R12
   \   0000B2   B012....     CALL    #TI_CC_SPIWriteReg
    266              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG0,  0xF8); // Modem configuration.
   \   0000B6   7D40F800     MOV.B   #0xf8, R13
   \   0000BA   7C401400     MOV.B   #0x14, R12
   \   0000BE   B012....     CALL    #TI_CC_SPIWriteReg
    267              TI_CC_SPIWriteReg(TI_CCxxx0_DEVIATN,  0x00); // Modem dev (when FSK mod en)
   \   0000C2   4D43         MOV.B   #0x0, R13
   \   0000C4   7C401500     MOV.B   #0x15, R12
   \   0000C8   B012....     CALL    #TI_CC_SPIWriteReg
    268              TI_CC_SPIWriteReg(TI_CCxxx0_MCSM1 ,   0x3F); //MainRadio Cntrl State Machine
   \   0000CC   7D403F00     MOV.B   #0x3f, R13
   \   0000D0   7C401700     MOV.B   #0x17, R12
   \   0000D4   B012....     CALL    #TI_CC_SPIWriteReg
    269              TI_CC_SPIWriteReg(TI_CCxxx0_MCSM0 ,   0x18); //MainRadio Cntrl State Machine
   \   0000D8   7D401800     MOV.B   #0x18, R13
   \   0000DC   7C401800     MOV.B   #0x18, R12
   \   0000E0   B012....     CALL    #TI_CC_SPIWriteReg
    270              TI_CC_SPIWriteReg(TI_CCxxx0_FOCCFG,   0x1D); // Freq Offset Compens. Config
   \   0000E4   7D401D00     MOV.B   #0x1d, R13
   \   0000E8   7C401900     MOV.B   #0x19, R12
   \   0000EC   B012....     CALL    #TI_CC_SPIWriteReg
    271              TI_CC_SPIWriteReg(TI_CCxxx0_BSCFG,    0x1C); //  Bit synchronization config.
   \   0000F0   7D401C00     MOV.B   #0x1c, R13
   \   0000F4   7C401A00     MOV.B   #0x1a, R12
   \   0000F8   B012....     CALL    #TI_CC_SPIWriteReg
    272              TI_CC_SPIWriteReg(TI_CCxxx0_AGCCTRL2, 0xC7); // AGC control.
   \   0000FC   7D40C700     MOV.B   #0xc7, R13
   \   000100   7C401B00     MOV.B   #0x1b, R12
   \   000104   B012....     CALL    #TI_CC_SPIWriteReg
    273              TI_CC_SPIWriteReg(TI_CCxxx0_AGCCTRL1, 0x00); // AGC control.
   \   000108   4D43         MOV.B   #0x0, R13
   \   00010A   7C401C00     MOV.B   #0x1c, R12
   \   00010E   B012....     CALL    #TI_CC_SPIWriteReg
    274              TI_CC_SPIWriteReg(TI_CCxxx0_AGCCTRL0, 0xB2); // AGC control.
   \   000112   7D40B200     MOV.B   #0xb2, R13
   \   000116   7C401D00     MOV.B   #0x1d, R12
   \   00011A   B012....     CALL    #TI_CC_SPIWriteReg
    275              TI_CC_SPIWriteReg(TI_CCxxx0_FREND1,   0xB6); // Front end RX configuration.
   \   00011E   7D40B600     MOV.B   #0xb6, R13
   \   000122   7C402100     MOV.B   #0x21, R12
   \   000126   B012....     CALL    #TI_CC_SPIWriteReg
    276              TI_CC_SPIWriteReg(TI_CCxxx0_FREND0,   0x10); // Front end RX configuration.
   \   00012A   7D401000     MOV.B   #0x10, R13
   \   00012E   7C402200     MOV.B   #0x22, R12
   \   000132   B012....     CALL    #TI_CC_SPIWriteReg
    277              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL3,   0xEA); // Frequency synthesizer cal.
   \   000136   7D40EA00     MOV.B   #0xea, R13
   \   00013A   7C402300     MOV.B   #0x23, R12
   \   00013E   B012....     CALL    #TI_CC_SPIWriteReg
    278              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL2,   0x0A); // Frequency synthesizer cal.
   \   000142   7D400A00     MOV.B   #0xa, R13
   \   000146   7C402400     MOV.B   #0x24, R12
   \   00014A   B012....     CALL    #TI_CC_SPIWriteReg
    279              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL1,   0x00); // Frequency synthesizer cal.
   \   00014E   4D43         MOV.B   #0x0, R13
   \   000150   7C402500     MOV.B   #0x25, R12
   \   000154   B012....     CALL    #TI_CC_SPIWriteReg
    280              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL0,   0x11); // Frequency synthesizer cal.
   \   000158   7D401100     MOV.B   #0x11, R13
   \   00015C   7C402600     MOV.B   #0x26, R12
   \   000160   B012....     CALL    #TI_CC_SPIWriteReg
    281              TI_CC_SPIWriteReg(TI_CCxxx0_FSTEST,   0x59); // Frequency synthesizer cal.
   \   000164   7D405900     MOV.B   #0x59, R13
   \   000168   7C402900     MOV.B   #0x29, R12
   \   00016C   B012....     CALL    #TI_CC_SPIWriteReg
    282              TI_CC_SPIWriteReg(TI_CCxxx0_TEST2,    0x88); // Various test settings.
   \   000170   7D408800     MOV.B   #0x88, R13
   \   000174   7C402C00     MOV.B   #0x2c, R12
   \   000178   B012....     CALL    #TI_CC_SPIWriteReg
    283              TI_CC_SPIWriteReg(TI_CCxxx0_TEST1,    0x31); // Various test settings.
   \   00017C   7D403100     MOV.B   #0x31, R13
   \   000180   7C402D00     MOV.B   #0x2d, R12
   \   000184   B012....     CALL    #TI_CC_SPIWriteReg
    284              TI_CC_SPIWriteReg(TI_CCxxx0_TEST0,    0x0B); // Various test settings.
   \   000188   7D400B00     MOV.B   #0xb, R13
   \   00018C   7C402E00     MOV.B   #0x2e, R12
   \   000190   B012....     CALL    #TI_CC_SPIWriteReg
    285              
    286              TI_CC_SPIWriteReg(TI_CCxxx0_PATABLE,  0x60); //PATABLE
   \   000194   7D406000     MOV.B   #0x60, R13
   \   000198   7C403E00     MOV.B   #0x3e, R12
   \   00019C   B012....     CALL    #TI_CC_SPIWriteReg
    287          }
   \   0001A0   3A41         POP.W   R10
   \   0001A2   3041         RET
    288          
    289          // PATABLE (0 dBm output power)
    290          //extern char paTable_868[] = {0x60};
    291          //extern char paTableLen = 1;
    292          
    293          
    294          
    295          
    296          //#if TI_CC_RF_FREQ == 915                          // 915 MHz
    297          // Product = CC1100
    298          // Crystal accuracy = 40 ppm
    299          // X-tal frequency = 26 MHz
    300          // RF output power = 0 dBm
    301          // RX filterbandwidth = 540.000000 kHz
    302          // Deviation = 0.000000
    303          // Return state:  Return to RX state upon leaving either TX or RX
    304          // Datarate = 250.000000 kbps
    305          // Modulation = (7) MSK
    306          // Manchester enable = (0) Manchester disabled
    307          // RF Frequency = 915.000000 MHz
    308          // Channel spacing = 199.951172 kHz
    309          // Channel number = 0
    310          // Optimization = Sensitivity
    311          // Sync mode = (3) 30/32 sync word bits detected
    312          // Format of RX/TX data = (0) Normal mode, use FIFOs for RX and TX
    313          // CRC operation = (1) CRC calculation in TX and CRC check in RX enabled
    314          // Forward Error Correction = (0) FEC disabled
    315          // Length configuration = (1) Variable length packets, packet length configured by the first received byte after sync word.
    316          // Packetlength = 255
    317          // Preamble count = (2)  4 bytes
    318          // Append status = 1
    319          // Address check = (0) No address check
    320          // FIFO autoflush = 0
    321          // Device address = 0
    322          // GDO0 signal selection = ( 6) Asserts when sync word has been sent / received, and de-asserts at the end of the packet
    323          // GDO2 signal selection = (11) Serial Clock

   \                                 In  segment CODE, align 2
    324          void writeRFSettings_915(unsigned char channel)
   \                     writeRFSettings_915:
    325          {
   \   000000   0A12         PUSH.W  R10
   \   000002   4A4C         MOV.B   R12, R10
    326              // Write register settings
    327              TI_CC_SPIWriteReg(TI_CCxxx0_IOCFG2,   0x0B); // GDO2 output pin config.
   \   000004   7D400B00     MOV.B   #0xb, R13
   \   000008   4C43         MOV.B   #0x0, R12
   \   00000A   B012....     CALL    #TI_CC_SPIWriteReg
    328              TI_CC_SPIWriteReg(TI_CCxxx0_IOCFG0,   0x06); // GDO0 output pin config.
   \   00000E   7D400600     MOV.B   #0x6, R13
   \   000012   6C43         MOV.B   #0x2, R12
   \   000014   B012....     CALL    #TI_CC_SPIWriteReg
    329              TI_CC_SPIWriteReg(TI_CCxxx0_PKTLEN,   0xFF); // Packet length.
   \   000018   7D43         MOV.B   #0xff, R13
   \   00001A   7C400600     MOV.B   #0x6, R12
   \   00001E   B012....     CALL    #TI_CC_SPIWriteReg
    330              TI_CC_SPIWriteReg(TI_CCxxx0_PKTCTRL1, 0x05); // Packet automation control.
   \   000022   7D400500     MOV.B   #0x5, R13
   \   000026   7C400700     MOV.B   #0x7, R12
   \   00002A   B012....     CALL    #TI_CC_SPIWriteReg
    331              TI_CC_SPIWriteReg(TI_CCxxx0_PKTCTRL0, 0x05); // Packet automation control.
   \   00002E   7D400500     MOV.B   #0x5, R13
   \   000032   7C42         MOV.B   #0x8, R12
   \   000034   B012....     CALL    #TI_CC_SPIWriteReg
    332              TI_CC_SPIWriteReg(TI_CCxxx0_ADDR,     0x01); // Device address.
   \   000038   5D43         MOV.B   #0x1, R13
   \   00003A   7C400900     MOV.B   #0x9, R12
   \   00003E   B012....     CALL    #TI_CC_SPIWriteReg
    333              TI_CC_SPIWriteReg(TI_CCxxx0_CHANNR,   (channel >> 2)); // Channel number.
   \   000042   12C3         CLRC
   \   000044   4A10         RRC.B   R10
   \   000046   4A11         RRA.B   R10
   \   000048   4D4A         MOV.B   R10, R13
   \   00004A   7C400A00     MOV.B   #0xa, R12
   \   00004E   B012....     CALL    #TI_CC_SPIWriteReg
    334              TI_CC_SPIWriteReg(TI_CCxxx0_FSCTRL1,  0x0B); // Freq synthesizer control.
   \   000052   7D400B00     MOV.B   #0xb, R13
   \   000056   7C400B00     MOV.B   #0xb, R12
   \   00005A   B012....     CALL    #TI_CC_SPIWriteReg
    335              TI_CC_SPIWriteReg(TI_CCxxx0_FSCTRL0,  0x00); // Freq synthesizer control.
   \   00005E   4D43         MOV.B   #0x0, R13
   \   000060   7C400C00     MOV.B   #0xc, R12
   \   000064   B012....     CALL    #TI_CC_SPIWriteReg
    336              TI_CC_SPIWriteReg(TI_CCxxx0_FREQ2,    0x23); // Freq control word, high byte
   \   000068   7D402300     MOV.B   #0x23, R13
   \   00006C   7C400D00     MOV.B   #0xd, R12
   \   000070   B012....     CALL    #TI_CC_SPIWriteReg
    337              TI_CC_SPIWriteReg(TI_CCxxx0_FREQ1,    0x31); // Freq control word, mid byte.
   \   000074   7D403100     MOV.B   #0x31, R13
   \   000078   7C400E00     MOV.B   #0xe, R12
   \   00007C   B012....     CALL    #TI_CC_SPIWriteReg
    338              TI_CC_SPIWriteReg(TI_CCxxx0_FREQ0,    0x3B); // Freq control word, low byte.
   \   000080   7D403B00     MOV.B   #0x3b, R13
   \   000084   7C400F00     MOV.B   #0xf, R12
   \   000088   B012....     CALL    #TI_CC_SPIWriteReg
    339              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG4,  0x2D); // Modem configuration.
   \   00008C   7D402D00     MOV.B   #0x2d, R13
   \   000090   7C401000     MOV.B   #0x10, R12
   \   000094   B012....     CALL    #TI_CC_SPIWriteReg
    340              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG3,  0x3B); // Modem configuration.
   \   000098   7D403B00     MOV.B   #0x3b, R13
   \   00009C   7C401100     MOV.B   #0x11, R12
   \   0000A0   B012....     CALL    #TI_CC_SPIWriteReg
    341              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG2,  0x73); // Modem configuration.
   \   0000A4   7D407300     MOV.B   #0x73, R13
   \   0000A8   7C401200     MOV.B   #0x12, R12
   \   0000AC   B012....     CALL    #TI_CC_SPIWriteReg
    342              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG1,  0x22); // Modem configuration.
   \   0000B0   7D402200     MOV.B   #0x22, R13
   \   0000B4   7C401300     MOV.B   #0x13, R12
   \   0000B8   B012....     CALL    #TI_CC_SPIWriteReg
    343              TI_CC_SPIWriteReg(TI_CCxxx0_MDMCFG0,  0xF8); // Modem configuration.
   \   0000BC   7D40F800     MOV.B   #0xf8, R13
   \   0000C0   7C401400     MOV.B   #0x14, R12
   \   0000C4   B012....     CALL    #TI_CC_SPIWriteReg
    344              TI_CC_SPIWriteReg(TI_CCxxx0_DEVIATN,  0x00); // Modem dev (when FSK mod en)
   \   0000C8   4D43         MOV.B   #0x0, R13
   \   0000CA   7C401500     MOV.B   #0x15, R12
   \   0000CE   B012....     CALL    #TI_CC_SPIWriteReg
    345              TI_CC_SPIWriteReg(TI_CCxxx0_MCSM1 ,   0x3F); //MainRadio Cntrl State Machine
   \   0000D2   7D403F00     MOV.B   #0x3f, R13
   \   0000D6   7C401700     MOV.B   #0x17, R12
   \   0000DA   B012....     CALL    #TI_CC_SPIWriteReg
    346              TI_CC_SPIWriteReg(TI_CCxxx0_MCSM0 ,   0x18); //MainRadio Cntrl State Machine
   \   0000DE   7D401800     MOV.B   #0x18, R13
   \   0000E2   7C401800     MOV.B   #0x18, R12
   \   0000E6   B012....     CALL    #TI_CC_SPIWriteReg
    347              TI_CC_SPIWriteReg(TI_CCxxx0_FOCCFG,   0x1D); // Freq Offset Compens. Config
   \   0000EA   7D401D00     MOV.B   #0x1d, R13
   \   0000EE   7C401900     MOV.B   #0x19, R12
   \   0000F2   B012....     CALL    #TI_CC_SPIWriteReg
    348              TI_CC_SPIWriteReg(TI_CCxxx0_BSCFG,    0x1C); //  Bit synchronization config.
   \   0000F6   7D401C00     MOV.B   #0x1c, R13
   \   0000FA   7C401A00     MOV.B   #0x1a, R12
   \   0000FE   B012....     CALL    #TI_CC_SPIWriteReg
    349              TI_CC_SPIWriteReg(TI_CCxxx0_AGCCTRL2, 0xC7); // AGC control.
   \   000102   7D40C700     MOV.B   #0xc7, R13
   \   000106   7C401B00     MOV.B   #0x1b, R12
   \   00010A   B012....     CALL    #TI_CC_SPIWriteReg
    350              TI_CC_SPIWriteReg(TI_CCxxx0_AGCCTRL1, 0x00); // AGC control.
   \   00010E   4D43         MOV.B   #0x0, R13
   \   000110   7C401C00     MOV.B   #0x1c, R12
   \   000114   B012....     CALL    #TI_CC_SPIWriteReg
    351              TI_CC_SPIWriteReg(TI_CCxxx0_AGCCTRL0, 0xB2); // AGC control.
   \   000118   7D40B200     MOV.B   #0xb2, R13
   \   00011C   7C401D00     MOV.B   #0x1d, R12
   \   000120   B012....     CALL    #TI_CC_SPIWriteReg
    352              TI_CC_SPIWriteReg(TI_CCxxx0_FREND1,   0xB6); // Front end RX configuration.
   \   000124   7D40B600     MOV.B   #0xb6, R13
   \   000128   7C402100     MOV.B   #0x21, R12
   \   00012C   B012....     CALL    #TI_CC_SPIWriteReg
    353              TI_CC_SPIWriteReg(TI_CCxxx0_FREND0,   0x10); // Front end RX configuration.
   \   000130   7D401000     MOV.B   #0x10, R13
   \   000134   7C402200     MOV.B   #0x22, R12
   \   000138   B012....     CALL    #TI_CC_SPIWriteReg
    354              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL3,   0xEA); // Frequency synthesizer cal.
   \   00013C   7D40EA00     MOV.B   #0xea, R13
   \   000140   7C402300     MOV.B   #0x23, R12
   \   000144   B012....     CALL    #TI_CC_SPIWriteReg
    355              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL2,   0x0A); // Frequency synthesizer cal.
   \   000148   7D400A00     MOV.B   #0xa, R13
   \   00014C   7C402400     MOV.B   #0x24, R12
   \   000150   B012....     CALL    #TI_CC_SPIWriteReg
    356              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL1,   0x00); // Frequency synthesizer cal.
   \   000154   4D43         MOV.B   #0x0, R13
   \   000156   7C402500     MOV.B   #0x25, R12
   \   00015A   B012....     CALL    #TI_CC_SPIWriteReg
    357              TI_CC_SPIWriteReg(TI_CCxxx0_FSCAL0,   0x11); // Frequency synthesizer cal.
   \   00015E   7D401100     MOV.B   #0x11, R13
   \   000162   7C402600     MOV.B   #0x26, R12
   \   000166   B012....     CALL    #TI_CC_SPIWriteReg
    358              TI_CC_SPIWriteReg(TI_CCxxx0_FSTEST,   0x59); // Frequency synthesizer cal.
   \   00016A   7D405900     MOV.B   #0x59, R13
   \   00016E   7C402900     MOV.B   #0x29, R12
   \   000172   B012....     CALL    #TI_CC_SPIWriteReg
    359              TI_CC_SPIWriteReg(TI_CCxxx0_TEST2,    0x88); // Various test settings.
   \   000176   7D408800     MOV.B   #0x88, R13
   \   00017A   7C402C00     MOV.B   #0x2c, R12
   \   00017E   B012....     CALL    #TI_CC_SPIWriteReg
    360              TI_CC_SPIWriteReg(TI_CCxxx0_TEST1,    0x31); // Various test settings.
   \   000182   7D403100     MOV.B   #0x31, R13
   \   000186   7C402D00     MOV.B   #0x2d, R12
   \   00018A   B012....     CALL    #TI_CC_SPIWriteReg
    361              TI_CC_SPIWriteReg(TI_CCxxx0_TEST0,    0x0B); // Various test settings.    
   \   00018E   7D400B00     MOV.B   #0xb, R13
   \   000192   7C402E00     MOV.B   #0x2e, R12
   \   000196   B012....     CALL    #TI_CC_SPIWriteReg
    362              //switch(channel & 0b11)
    363              TI_CC_SPIWriteReg(TI_CCxxx0_PATABLE,  0x50); //PATABLE
   \   00019A   7D405000     MOV.B   #0x50, R13
   \   00019E   7C403E00     MOV.B   #0x3e, R12
   \   0001A2   B012....     CALL    #TI_CC_SPIWriteReg
    364          }
   \   0001A6   3A41         POP.W   R10
   \   0001A8   3041         RET
    365          
    366          // PATABLE (0 dBm output power)
    367          //extern char paTable_915[] = {0x50};
    368          //extern char paTableLen = 1;
    369          
    370          
    371          
    372          
    373          //-----------------------------------------------------------------------------
    374          //  void RFSendPacket(char *txBuffer, char size)
    375          //
    376          //  DESCRIPTION:
    377          //  This function transmits a packet with length up to 63 bytes.  To use this
    378          //  function, GD00 must be configured to be asserted when sync word is sent and
    379          //  de-asserted at the end of the packet, which is accomplished by setting the
    380          //  IOCFG0 register to 0x06, per the CCxxxx datasheet.  GDO0 goes high at
    381          //  packet start and returns low when complete.  The function polls GDO0 to
    382          //  ensure packet completion before returning.
    383          //
    384          //  ARGUMENTS:
    385          //      char *txBuffer
    386          //          Pointer to a buffer containing the data to be transmitted
    387          //
    388          //      char size
    389          //          The size of the txBuffer
    390          //-----------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    391          void RFSendPacket(char *txBuffer, char size)
   \                     RFSendPacket:
    392          {
    393            TI_CC_SPIWriteBurstReg(TI_CCxxx0_TXFIFO, txBuffer, size); // Write TX data
   \   000000   4E4D         MOV.B   R13, R14
   \   000002   0D4C         MOV.W   R12, R13
   \   000004   7C403F00     MOV.B   #0x3f, R12
   \   000008   B012....     CALL    #TI_CC_SPIWriteBurstReg
    394            TI_CC_SPIStrobe(TI_CCxxx0_STX);           // Change state to TX, initiating
   \   00000C   7C403500     MOV.B   #0x35, R12
   \   000010   B012....     CALL    #TI_CC_SPIStrobe
    395                                                      // data transfer
    396          
    397            while (!(TI_CC_GDO0_PxIN&TI_CC_GDO0_PIN));
   \                     ??RFSendPacket_0:
   \   000014   C2932800     CMP.B   #0x0, &0x28
   \   000018   FD37         JGE     ??RFSendPacket_0
    398                                                      // Wait GDO0 to go hi -> sync TX'ed
    399            while (TI_CC_GDO0_PxIN&TI_CC_GDO0_PIN);
   \                     ??RFSendPacket_1:
   \   00001A   C2932800     CMP.B   #0x0, &0x28
   \   00001E   FD3B         JL      ??RFSendPacket_1
    400                                                      // Wait GDO0 to clear -> end of pkt
    401            TI_CC_GDO0_PxIFG &= ~TI_CC_GDO0_PIN;      // After pkt TX, this flag is set.
   \   000020   F2C080002B00 BIC.B   #0x80, &0x2b
    402                                                      // Has to be cleared before existing
    403          }
   \   000026   3041         RET
   \   000028                REQUIRE _A_P2IN
   \   000028                REQUIRE _A_P2IFG
    404          
    405          
    406          
    407          //-----------------------------------------------------------------------------
    408          //  char RFReceivePacket(char *rxBuffer, char *length)
    409          //
    410          //  DESCRIPTION:
    411          //  Receives a packet of variable length (first byte in the packet must be the
    412          //  length byte).  The packet length should not exceed the RXFIFO size.  To use
    413          //  this function, APPEND_STATUS in the PKTCTRL1 register must be enabled.  It
    414          //  is assumed that the function is called after it is known that a packet has
    415          //  been received; for example, in response to GDO0 going low when it is
    416          //  configured to output packet reception status.
    417          //
    418          //  The RXBYTES register is first read to ensure there are bytes in the FIFO.
    419          //  This is done because the GDO signal will go high even if the FIFO is flushed
    420          //  due to address filtering, CRC filtering, or packet length filtering.
    421          //
    422          //  ARGUMENTS:
    423          //      char *rxBuffer
    424          //          Pointer to the buffer where the incoming data should be stored
    425          //      char *length
    426          //          Pointer to a variable containing the size of the buffer where the
    427          //          incoming data should be stored. After this function returns, that
    428          //          variable holds the packet length.
    429          //
    430          //  RETURN VALUE:
    431          //      char
    432          //          0x80:  CRC OK
    433          //          0x00:  CRC NOT OK (or no pkt was put in the RXFIFO due to filtering)
    434          //-----------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    435          char RFReceivePacket(char *rxBuffer, char *length)
   \                     RFReceivePacket:
    436          {
   \   000000   0A12         PUSH.W  R10
   \   000002   0B12         PUSH.W  R11
   \   000004   0812         PUSH.W  R8
   \   000006   2183         SUB.W   #0x2, SP
   \   000008   0A4C         MOV.W   R12, R10
   \   00000A   0B4D         MOV.W   R13, R11
    437            char status[2];
    438            char pktLen;
    439          
    440            if ((TI_CC_SPIReadStatus(TI_CCxxx0_RXBYTES) & TI_CCxxx0_NUM_RXBYTES))
   \   00000C   7C403B00     MOV.B   #0x3b, R12
   \   000010   B012....     CALL    #TI_CC_SPIReadStatus
   \   000014   7CB07F00     BIT.B   #0x7f, R12
   \   000018   2324         JEQ     ??RFReceivePacket_0
    441            {
    442              pktLen = TI_CC_SPIReadReg(TI_CCxxx0_RXFIFO); // Read length byte
   \   00001A   7C403F00     MOV.B   #0x3f, R12
   \   00001E   B012....     CALL    #TI_CC_SPIReadReg
   \   000022   484C         MOV.B   R12, R8
    443          
    444              if (pktLen <= *length)                  // If pktLen size <= rxBuffer
   \   000024   CB980000     CMP.B   R8, 0(R11)
   \   000028   1328         JNC     ??RFReceivePacket_1
    445              {
    446                TI_CC_SPIReadBurstReg(TI_CCxxx0_RXFIFO, rxBuffer, pktLen); // Pull data
   \   00002A   4E48         MOV.B   R8, R14
   \   00002C   0D4A         MOV.W   R10, R13
   \   00002E   7C403F00     MOV.B   #0x3f, R12
   \   000032   B012....     CALL    #TI_CC_SPIReadBurstReg
    447                *length = pktLen;                     // Return the actual size
   \   000036   CB480000     MOV.B   R8, 0(R11)
    448                TI_CC_SPIReadBurstReg(TI_CCxxx0_RXFIFO, status, 2);
   \   00003A   6E43         MOV.B   #0x2, R14
   \   00003C   0D41         MOV.W   SP, R13
   \   00003E   7C403F00     MOV.B   #0x3f, R12
   \   000042   B012....     CALL    #TI_CC_SPIReadBurstReg
    449                                                      // Read appended status bytes
    450                return (char)(status[TI_CCxxx0_LQI_RX]&TI_CCxxx0_CRC_OK);
   \   000046   5C410100     MOV.B   0x1(SP), R12
   \   00004A   7CF08000     AND.B   #0x80, R12
   \   00004E   093C         JMP     ??RFReceivePacket_2
    451              }                                       // Return CRC_OK bit
    452              else
    453              {
    454                *length = pktLen;                     // Return the large size
   \                     ??RFReceivePacket_1:
   \   000050   CB480000     MOV.B   R8, 0(R11)
    455                TI_CC_SPIStrobe(TI_CCxxx0_SFRX);      // Flush RXFIFO
   \   000054   7C403A00     MOV.B   #0x3a, R12
   \   000058   B012....     CALL    #TI_CC_SPIStrobe
    456                return 0;                             // Error
   \   00005C   4C43         MOV.B   #0x0, R12
   \   00005E   013C         JMP     ??RFReceivePacket_2
    457              }
    458            }
    459            else
    460                return 0;                             // Error
   \                     ??RFReceivePacket_0:
   \   000060   4C43         MOV.B   #0x0, R12
   \                     ??RFReceivePacket_2:
   \   000062   2153         ADD.W   #0x2, SP
   \   000064   3040....     BR      #?Epilogue3
    461          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     10   RFReceivePacket
       10   -> TI_CC_SPIReadBurstReg
       10   -> TI_CC_SPIReadReg
       10   -> TI_CC_SPIReadStatus
       10   -> TI_CC_SPIStrobe
        8 ?Epilogue3
      2   RFSendPacket
        2   -> TI_CC_SPIStrobe
        2   -> TI_CC_SPIWriteBurstReg
      4   writeRFSettings_315
        4   -> TI_CC_SPIWriteReg
      4   writeRFSettings_433
        4   -> TI_CC_SPIWriteReg
      4   writeRFSettings_868
        4   -> TI_CC_SPIWriteReg
      4   writeRFSettings_915
        4   -> TI_CC_SPIWriteReg


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     104  RFReceivePacket
      40  RFSendPacket
       1  _A_P2IFG
       1  _A_P2IN
     420  writeRFSettings_315
     420  writeRFSettings_433
     420  writeRFSettings_868
     426  writeRFSettings_915

 
 1 830 bytes in segment CODE
     2 bytes in segment DATA16_AN
 
 1 830 bytes of CODE memory
     0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: 1
